@page "/game"
@using Client.Services
@using Client.Components
@inject GameService GameService
@inject NavigationManager NavigationManager

@if (gameStarted)
{
    <div class="position-relative text-white mb-3">
        <!-- Центр -->
        <p class="mb-0 display-5 score-box text-center position-absolute start-50 translate-middle-x">Текущий счет: @currentScore</p>
        <!-- Справа -->
        <p class="mb-0 position-absolute end-0">Id игры: <strong>@gameId</strong></p>
    </div>

    <!-- Общий счет -->
    <div class="col-3">
        <p class="text-white fw-bold">Общий счет:</p>
        <ul class="list-unstyled text-white">
            @foreach (var player in players)
            {
                var isCurrentUser = player == userName;
                <li class="mb-2 @(isCurrentUser ? "fw-bold text-danger" : "")">
                    @player: @(PlayersScores.ContainsKey(player) ? PlayersScores[player].ToString() : "0")
                </li>
            }
        </ul>
    </div>

    <!-- Кубик -->
    <div class="text-center my-3">
        <Dice CurrentValue="diceValue" IsRolling="isRollingDice" />
    </div>

    <!-- Надпись "Ход завершен" -->
    @if (showTurnEndedMessage)
    {
        <div class="custom-toast text-white text-center mx-auto p-3 rounded fade-in-out" role="alert">
            @turnEndedMessage
        </div>
    }

    <!-- Кнопки управления -->
    <div class="d-flex justify-content-center fixed-bottom mb-4">
        <button @onclick="RollDice"
        class="@($"btn btn-lg me-2 {(currentPlayer != userName ? "btn-secondary" : "btn-warning")}")"
        style="background-color: yellow; color: black;"
        disabled="@(currentPlayer != userName)">
            Бросить кубик
        </button>
        <button @onclick="EndTurn"
        class="@($"btn btn-lg ms-2 {(currentPlayer != userName ? "btn-secondary" : "btn-warning")}")"
        style="background-color: yellow; color: black;"
        disabled="@(currentPlayer != userName)">
            Завершить ход
        </button>
    </div>
}
else
{
    <h1 class="text-white text-center">Id игры: <strong>@gameId</strong></h1>
}
<link rel="preload" href="images/happy.png" as="image">
<link rel="preload" href="images/sad.png" as="image">
@if (gameOver)
{
    <div class="text-center text-white">
        @if (userName == GameWinner)
        {
            <p class="display-4">Победа!</p>
            <img src="images/happy.png" alt="Победа" height="500"><br />
        }
        else
        {
            <p class="display-4">Поражение</p>
            <img src="images/sad.png" alt="Победа" height="500"><br />
        }
        <button @onclick="PlayAgain" class="btn btn-lg btn-warning mt-3">Играть еще раз</button>
    </div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger text-center" role="alert">
        @errorMessage
    </div>
}


<style>
    body {
    background-color: #0bda51;
    }

    .btn-warning:disabled {
    background-color: grey !important;
    color: white !important;
    }
</style>

@code {
    private string gameId = "";
    private List<string> players = new();
    private string currentPlayer = "";
    private bool gameStarted = false;
    private bool gameOver = false;
    private string userName = "";
    private Dictionary<string, int> PlayersScores = new();
    private int currentScore = 0;
    private string GameWinner = "";
    private int diceValue = 1; // Текущее значение на кубике
    private bool isRollingDice = false;
    private bool showTurnEndedMessage = false;
    private string turnEndedMessage = "";
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        var query = new Uri(NavigationManager.Uri).Query;
        var parameters = System.Web.HttpUtility.ParseQueryString(query);
        userName = parameters["userName"];
        gameId = parameters["gameId"];

        if (string.IsNullOrWhiteSpace(userName) || string.IsNullOrWhiteSpace(gameId))
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        GameService.OnPlayerListUpdated += (updatedPlayers) =>
        {
            players = updatedPlayers;
            StateHasChanged();
        };

        GameService.OnGameStarted += (startingPlayer) =>
        {
            isRollingDice = false;
            gameStarted = true;
            currentPlayer = startingPlayer;
            StateHasChanged();
        };

        GameService.OnDiceRolled += (player, roll, currentTurnScore, totalScores) =>
        {
            diceValue = roll;
            isRollingDice = false;
            currentScore = currentTurnScore;
            PlayersScores = totalScores;
            StateHasChanged();
        };

        GameService.OnRolledOne += (nextPlayer, totalScores) =>
        {
            turnEndedMessage = $"Ход завершен! Набрано 0 очков";
            showTurnEndedMessage = true;
            currentScore = 0;
            StateHasChanged();
            _ = HideTurnEndedMessageAsync();

            currentPlayer = nextPlayer;
            diceValue = 1; // Сброс кубика
            isRollingDice = false;
            PlayersScores = totalScores;
            StateHasChanged();
        };

        GameService.OnNextTurn += (nextPlayer, totalScores) =>
        {
            turnEndedMessage = $"Ход завершен! Набрано {currentScore} очков";
            showTurnEndedMessage = true;
            currentScore = 0;
            StateHasChanged();
            _ = HideTurnEndedMessageAsync();

            isRollingDice = false;
            currentPlayer = nextPlayer;
            PlayersScores = totalScores;
            StateHasChanged();
        };

        GameService.OnGameOver += (winner) =>
        {
            isRollingDice = false;
            gameStarted = false;
            gameOver = true;
            GameWinner = winner;
            StateHasChanged();
        };

        GameService.OnGameAborted += () =>
        {
            NavigationManager.NavigateTo("/");
        };

        GameService.OnError += HandleError;

        await GameService.ConnectAsync();
        await GameService.JoinGameAsync(gameId, userName);
        errorMessage = null;
    }

    private async Task RollDice()
    {
        isRollingDice = true;
        await Task.Delay(500);
        await GameService.RollDiceAsync(gameId);
    }

    private async Task EndTurn()
    {
        await GameService.EndTurnAsync(gameId);
    }

    private async void PlayAgain()
    {
        gameOver = false;
        await GameService.JoinGameAsync(gameId, userName);
    }

    private async Task HideTurnEndedMessageAsync()
    {
        await Task.Delay(3000); // Задержка 3 секунды
        showTurnEndedMessage = false;
        StateHasChanged();
    }

    private void HandleError(string message)
    {
        errorMessage = message; // Сохраняем сообщение об ошибке
        StateHasChanged(); // Обновляем интерфейс
    }
}